"""
    결측치 처리
    1. 삭제 - 행 또는 열
    2. 임의의 값
        - 0 : fillna
        - 평균 : mean (이상치의 문제가 있음)
        - 중위 : median
        - 앞값 : ffill      #시계열 
        - 뒷값 : bfill
        - 특정값 : 777 (조건 보고 넣는게 낫다)
        - 기타등등...
    
    3. interpolate - 보간(알려진 데이터 점 집합의 범위 내에 새 데이터 점을 추가하는 기법)
    4. 모델 : .predict (값을 예측해서, 전혀 다른 모델 사용.)
                    * nan값을 수동 처리 하는게 성능이 훨씬 좋아진다 단, 처리할 수 없으면 그냥 돌려야 한다.
                    * 원데이터는 건들지 않고 copy 하는 방향으로 작업하기.
    5. 부스팅 계열 모델 : 통상 이상치, 결측치에 대해 영향을 덜 받는다. (자유로워~)
"""

import pandas as pd
import numpy as np

dates = [
    '16/7/2025', '17/7/2025', '18/7/2025',
    '19/7/2025', '20/7/2025', '21/7/2025',
    '22/7/2025'
]
dates = pd.to_datetime(dates)
print(dates)
# DatetimeIndex(['2025-07-16', '2025-07-17', '2025-07-18', '2025-07-19',
#                '2025-07-20', '2025-07-21'],
#               dtype='datetime64[ns]', freq=None)
print("=====================================================")
ts = pd.Series([2, np.nan, np.nan, 8, 10, np.nan, np.nan], index=dates)
print(ts)

print("=====================================================")

ts = ts.interpolate() # 선형보간. 제일마지막 nan 은 ffill 하겠다는 것.
print(ts)
# 2025-07-16     2.0
# 2025-07-17     4.0
# 2025-07-18     6.0
# 2025-07-19     8.0
# 2025-07-20    10.0
# 2025-07-21    10.0
# 2025-07-22    10.0
# dtype: float64            nan 값이 float 형태이기 때문에 전부 float로 바뀜

# 중간값들은 linear로 채워짐. 마지막은 ffill (이전값으로 채워짐)



